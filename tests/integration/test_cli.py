"""Integration tests for CLI."""

import pytest
from click.testing import CliRunner

from src.cli import main


@pytest.mark.integration
class TestCLI:
    """Test the command-line interface."""

    def test_cli_basic_usage(self, tmp_path):
        """Test basic CLI usage with output file."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(main, ["examples/simple_nlp.gms", "-o", str(output_file)])

        assert result.exit_code == 0
        assert output_file.exists()

        content = output_file.read_text()
        assert "Generated by nlp2mcp" in content
        assert "Model mcp_model" in content
        assert "Solve mcp_model using MCP" in content

    def test_cli_stdout_output(self):
        """Test CLI output to stdout when no -o specified."""
        runner = CliRunner()

        result = runner.invoke(main, ["examples/simple_nlp.gms"])

        assert result.exit_code == 0
        assert "Generated by nlp2mcp" in result.output
        assert "Model mcp_model" in result.output

    def test_cli_verbose_mode(self, tmp_path):
        """Test CLI with verbose flag."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(main, ["examples/simple_nlp.gms", "-o", str(output_file), "-v"])

        assert result.exit_code == 0
        assert "Parsing model" in result.output
        assert "Assembling KKT system" in result.output
        assert "Conversion complete" in result.output

    def test_cli_very_verbose_mode(self, tmp_path):
        """Test CLI with -vv for extra verbosity."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(main, ["examples/simple_nlp.gms", "-o", str(output_file), "-vv"])

        assert result.exit_code == 0
        assert "Sets:" in result.output
        assert "Variables:" in result.output
        assert "Gradient columns:" in result.output

    def test_cli_no_comments(self, tmp_path):
        """Test CLI with --no-comments flag."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(
            main, ["examples/simple_nlp.gms", "-o", str(output_file), "--no-comments"]
        )

        assert result.exit_code == 0

        content = output_file.read_text()
        assert "$onText" not in content
        assert "Generated by nlp2mcp" not in content
        assert "Model mcp_model" in content  # Still has essential structure

    def test_cli_custom_model_name(self, tmp_path):
        """Test CLI with custom model name."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(
            main,
            ["examples/simple_nlp.gms", "-o", str(output_file), "--model-name", "my_custom_model"],
        )

        assert result.exit_code == 0

        content = output_file.read_text()
        assert "Model my_custom_model" in content
        assert "Solve my_custom_model using MCP" in content

    def test_cli_show_excluded(self, tmp_path):
        """Test CLI shows excluded duplicate bounds."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        # Note: This test will only show output if there are actually excluded bounds
        result = runner.invoke(
            main, ["examples/simple_nlp.gms", "-o", str(output_file), "--show-excluded"]
        )

        assert result.exit_code == 0
        # If there are excluded bounds, they should be shown
        # Otherwise, no error should occur

    def test_cli_no_show_excluded(self, tmp_path):
        """Test CLI with --no-show-excluded flag."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(
            main, ["examples/simple_nlp.gms", "-o", str(output_file), "--no-show-excluded"]
        )

        assert result.exit_code == 0
        # Should not show excluded bounds messages

    def test_cli_file_not_found(self):
        """Test CLI error handling for missing input file."""
        runner = CliRunner()

        result = runner.invoke(main, ["nonexistent.gms"])

        # Click returns exit code 2 for invalid usage (file not found)
        assert result.exit_code != 0
        assert "does not exist" in result.output or "Error" in result.output

    def test_cli_help(self):
        """Test CLI --help flag."""
        runner = CliRunner()

        result = runner.invoke(main, ["--help"])

        assert result.exit_code == 0
        assert "Convert GAMS NLP model to MCP format" in result.output
        assert "--output" in result.output
        assert "--verbose" in result.output

    def test_cli_multiple_verbosity_levels(self, tmp_path):
        """Test CLI with multiple -v flags."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(main, ["examples/simple_nlp.gms", "-o", str(output_file), "-vvv"])

        assert result.exit_code == 0
        # Extra verbosity should work without errors

    def test_cli_creates_output_directory(self, tmp_path):
        """Test CLI creates output directory if it doesn't exist."""
        runner = CliRunner()
        output_file = tmp_path / "subdir" / "output.gms"

        # Note: This might need adjustment based on CLI behavior
        # For now, assume parent dir must exist
        output_file.parent.mkdir(exist_ok=True)

        result = runner.invoke(main, ["examples/simple_nlp.gms", "-o", str(output_file)])

        assert result.exit_code == 0
        assert output_file.exists()

    def test_cli_overwrites_existing_file(self, tmp_path):
        """Test CLI overwrites existing output file."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        # Create existing file
        output_file.write_text("old content")

        result = runner.invoke(main, ["examples/simple_nlp.gms", "-o", str(output_file)])

        assert result.exit_code == 0
        content = output_file.read_text()
        assert "old content" not in content
        assert "Generated by nlp2mcp" in content

    def test_cli_preserves_variable_kinds(self, tmp_path):
        """Test that CLI preserves variable kinds in output."""
        runner = CliRunner()
        output_file = tmp_path / "output.gms"

        result = runner.invoke(main, ["examples/simple_nlp.gms", "-o", str(output_file)])

        assert result.exit_code == 0

        content = output_file.read_text()
        # Should have variable kind preservation
        assert "Variables" in content or "Positive Variables" in content
