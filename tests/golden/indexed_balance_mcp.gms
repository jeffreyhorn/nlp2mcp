$onText
Generated by nlp2mcp

This file contains the KKT (Karush-Kuhn-Tucker) conditions
for the original NLP model, transformed into MCP format.

KKT System Components:
  - Stationarity: ∇f + J^T λ + J^T ν - π^L + π^U = 0
  - Complementarity: g(x) ⊥ λ, h(x) = 0, bounds ⊥ π
  - Dual feasibility: λ, π^L, π^U ≥ 0
  - Primal feasibility: g(x) ≤ 0, h(x) = 0, lo ≤ x ≤ up
$offText

* ============================================
* Original Model Declarations
* ============================================

Sets
    i /i1, i2/
;

Parameters
    demand(i) /i1 3.0, i2 1.0/
;

* ============================================
* Variables (Primal + Multipliers)
* ============================================

* Primal variables: Original decision variables from the NLP
* Multipliers:
*   ν (nu_*): Free multipliers for equality constraints
*   λ (lam_*): Positive multipliers for inequality constraints
*   π^L (piL_*): Positive multipliers for lower bounds
*   π^U (piU_*): Positive multipliers for upper bounds

Variables
    supply(i)
    obj
    nu_objective
    nu_balance(i)
;

* ============================================
* Equations
* ============================================

* Stationarity: One equation per primal variable (except objvar)
* Complementarity: Equations for inequalities and bounds
* Equality constraints: Original equality constraints

Equations
    stat_supply_i1
    stat_supply_i2
    balance(i)
    objective
;

* ============================================
* Equation Definitions
* ============================================

* Stationarity equations
stat_supply_i1.. 1 + (1 - 0) * nu_balance("i1") + (0 - 0) * nu_balance("i2") =E= 0;
stat_supply_i2.. 1 + (0 - 0) * nu_balance("i1") + (1 - 0) * nu_balance("i2") =E= 0;

* Original equality equations
objective.. obj =E= sum(i, supply(i));
balance(i).. supply(i) =E= demand(i);


* ============================================
* Model MCP Declaration
* ============================================

* Each line pairs an equation with a variable:
*   equation.variable
*
* This defines the complementarity problem:
*   equation ⊥ variable
*
* Meaning: equation = 0 if variable > 0
*          equation ≥ 0 if variable = 0

Model mcp_model /
    stat_supply_i1.supply,
    stat_supply_i2.supply,
    balance(i).nu_balance(i),
    objective.obj
/;

* ============================================
* Solve Statement
* ============================================

Solve mcp_model using MCP;
