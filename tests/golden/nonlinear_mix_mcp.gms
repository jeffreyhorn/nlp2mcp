$onText
Generated by nlp2mcp

This file contains the KKT (Karush-Kuhn-Tucker) conditions
for the original NLP model, transformed into MCP format.

KKT System Components:
  - Stationarity: ∇f + J^T λ + J^T ν - π^L + π^U = 0
  - Complementarity: g(x) ⊥ λ, h(x) = 0, bounds ⊥ π
  - Dual feasibility: λ, π^L, π^U ≥ 0
  - Primal feasibility: g(x) ≤ 0, h(x) = 0, lo ≤ x ≤ up
$offText

* ============================================
* Original Model Declarations
* ============================================

* ============================================
* Variables (Primal + Multipliers)
* ============================================

* Primal variables: Original decision variables from the NLP
* Multipliers:
*   ν (nu_*): Free multipliers for equality constraints
*   λ (lam_*): Positive multipliers for inequality constraints
*   π^L (piL_*): Positive multipliers for lower bounds
*   π^U (piU_*): Positive multipliers for upper bounds

Variables
    x
    y
    obj
    nu_objective
    nu_trig_balance
    nu_poly_balance
;

Positive Variables
    piL_x
    piL_y
    piU_x
    piU_y
;

* ============================================
* Equations
* ============================================

* Stationarity: One equation per primal variable (except objvar)
* Complementarity: Equations for inequalities and bounds
* Equality constraints: Original equality constraints

Equations
    stat_x
    stat_y
    comp_lo_x
    comp_lo_y
    comp_up_x
    comp_up_y
;

* ============================================
* Equation Definitions
* ============================================

* Stationarity equations
stat_x.. 1 + 0 + (2 * power(x, 1) * 1 + 2 * power(y, 1) * 0 - 0) * nu_poly_balance + (cos(x) * 1 + -sin(y) * 0 - 0) * nu_trig_balance - piL_x + piU_x =E= 0;
stat_y.. 0 + 1 + (2 * power(x, 1) * 0 + 2 * power(y, 1) * 1 - 0) * nu_poly_balance + (cos(x) * 0 + -sin(y) * 1 - 0) * nu_trig_balance - piL_y + piU_y =E= 0;

* Lower bound complementarity equations
comp_lo_x.. x - -2 =G= 0;
comp_lo_y.. y - -2 =G= 0;

* Upper bound complementarity equations
comp_up_x.. 2 - x =G= 0;
comp_up_y.. 2 - y =G= 0;

* Original equality equations
objective.. obj =E= x + y;
trig_balance.. sin(x) + cos(y) =E= 0;
poly_balance.. x ** 2 + y ** 2 =E= 4;


* ============================================
* Model MCP Declaration
* ============================================

* Each line pairs an equation with a variable:
*   equation.variable
*
* This defines the complementarity problem:
*   equation ⊥ variable
*
* Meaning: equation = 0 if variable > 0
*          equation ≥ 0 if variable = 0

Model mcp_model /
    * Stationarity conditions
    stat_x.x
    stat_y.y

    * Equality constraints
    objective.obj
    poly_balance.nu_poly_balance
    trig_balance.nu_trig_balance

    * Lower bound complementarities
    comp_lo_x.piL_x
    comp_lo_y.piL_y

    * Upper bound complementarities
    comp_up_x.piU_x
    comp_up_y.piU_y
/;

* ============================================
* Solve Statement
* ============================================

Solve mcp_model using MCP;